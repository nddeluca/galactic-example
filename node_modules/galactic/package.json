{
  "name": "galactic",
  "version": "0.0.1",
  "author": {
    "name": "Nicholas DeLuca",
    "email": "nickdeluca08@gmail.com"
  },
  "description": "Project to model galaxy images in the browser.",
  "repository": {
    "type": "git",
    "url": "https://github.com/nddeluca/galacticjs"
  },
  "dependencies": {},
  "readme": "Galactic\n==========\nA library for displaying fits images of galaxies and interactivley creating models of their light profiles.\n\nInstall\n---\nAssuming you're the project inside a spinejs or hem application:\n\nAdd to package.json\n```coffeescript\n\"dependencies\": {\n  \"galactic\": \"git://github.com/nddeluca/galactic.git\"\n}\n```\nAdd to slug.json\n```coffeescript\n\"dependencies\": [\n  \"galactic\"\n]\n```\nRun\n```bash\nnpm install\n```\n\nUsage\n===\n\nDisplaying a Galaxy From a FITS Image\n---\nTo display a fits file create a new Display Object.  The Display class takes a container id, width, and an image.\nThe conainter id is the css id of the containing div element where the canvas will be created.\nThe width is the width of the canvas the fits image is displayed on (also the width of the image).\nThe image is any object with data, width, and height attributes.\n```coffeescript\nmyDisplay = new Galactic.Display(container_id, width, image)\n```\nOnce a Display is created, call processImage() to build the image and draw() to display  it on the canvas.\n```coffeescript\nmyDisplay.processImage()\nmyDisplay.draw()\n```\nThe default scaling of the image is linear, and the default colormap is grayscale.\nThe height is set by using the intial width to keep the same aspect ratio.  Also, the canvas \ndoes not have to be the same size as the fit file image.\nThe fits image will be scaled down or up to fit the canvas when drawn.\n\nExample:\n```coffeescript\nFitsCanvas = require('fits_canvas')\nFITS = require('fits')\n\nxhr = new XMLHttpRequest()\nxhr.open('GET', 'images/my_fits_file.fits')\nxhr.responseType = 'arraybuffer'    \nxhr.send()\n\nxhr.onload = (e) ->\n  #Use atrojs/fitsjs to get fits image from binary file\n  fitsFile = new FITS.file(xhr.response)\n  image = fitsFile.getDataUnit()\n  image.getFrame()\n  \n  display = new FitsCanvas.Display('my-canvas-container',500,image)\n  display.processImage()\n  display.draw()\n```\n```html\n<div id=\"my-canvas-container\"></div>\n```\n\n\n\nTo Do\n---\n* Write tests and benchmark\n* Add processor endainness check (the grayscale algorithm currently only works on little-endian machines)\n\nReferences\n---\nhttps://github.com/astrojs/fitsjs  \nhttps://hacks.mozilla.org/2011/12/faster-canvas-pixel-manipulation-with-typed-arrays/  \nhttp://tech-algorithm.com/articles/nearest-neighbor-image-scaling/  \nhttp://coffeescriptcookbook.com/  \n\n\n",
  "_id": "galactic@0.0.1",
  "dist": {
    "shasum": "dc3b48853d62205476e56b3a5303a2f1d2200828"
  },
  "_from": "galactic@git://github.com/nddeluca/galactic.git"
}
